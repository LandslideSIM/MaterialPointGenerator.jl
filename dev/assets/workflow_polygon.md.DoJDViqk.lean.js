import{_ as l,C as o,c as r,o as p,az as a,j as s,a as e,G as n}from"./chunks/framework.mzTpsqEJ.js";const h="/MaterialPointGenerator.jl/dev/assets/image3.BEJ5BXIT.png",_=JSON.parse('{"title":"Polygon","description":"","frontmatter":{},"headers":[],"relativePath":"workflow/polygon.md","filePath":"workflow/polygon.md","lastUpdated":null}'),d={name:"workflow/polygon.md"},k={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""};function u(m,i,C,f,F,b){const t=o("Badge");return p(),r("div",null,[i[12]||(i[12]=a("",6)),s("details",k,[s("summary",null,[i[0]||(i[0]=s("a",{id:"MaterialPointGenerator.polygon2particle-Tuple{Any, Any, Any}",href:"#MaterialPointGenerator.polygon2particle-Tuple{Any, Any, Any}"},[s("span",{class:"jlbinding"},"MaterialPointGenerator.polygon2particle")],-1)),i[1]||(i[1]=e()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[2]||(i[2]=a("",6))]),i[13]||(i[13]=a("",4)),s("details",g,[s("summary",null,[i[3]||(i[3]=s("a",{id:"MaterialPointGenerator.polygon2particle-Tuple{String, String, Any}",href:"#MaterialPointGenerator.polygon2particle-Tuple{String, String, Any}"},[s("span",{class:"jlbinding"},"MaterialPointGenerator.polygon2particle")],-1)),i[4]||(i[4]=e()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[5]||(i[5]=a("",4))]),i[14]||(i[14]=s("h2",{id:"advanced",tabindex:"-1"},[e("Advanced "),s("a",{class:"header-anchor",href:"#advanced","aria-label":'Permalink to "Advanced"'},"â€‹")],-1)),i[15]||(i[15]=s("p",null,"This involves some advanced operations for partitioning the generated material points. There are two ways to achieve this: 1) directly determining whether the current material point is within a specified polygonal area, and 2) using the concept of physical groups in Gmsh to differentiate the model during the meshing phase.",-1)),i[16]||(i[16]=s("p",null,"For the first case, we can utilize a practical function to check if a point is inside the polygon.",-1)),s("details",c,[s("summary",null,[i[6]||(i[6]=s("a",{id:"MaterialPointGenerator.particle_in_polygon-Union{Tuple{T}, Tuple{T, T, Any}} where T",href:"#MaterialPointGenerator.particle_in_polygon-Union{Tuple{T}, Tuple{T, T, Any}} where T"},[s("span",{class:"jlbinding"},"MaterialPointGenerator.particle_in_polygon")],-1)),i[7]||(i[7]=e()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[8]||(i[8]=a("",5))]),i[17]||(i[17]=s("p",null,[e("For the second case, in addition to the "),s("code",null,".stl"),e(" file, we also need to provide a "),s("code",null,".msh"),e(" file.")],-1)),s("details",y,[s("summary",null,[i[9]||(i[9]=s("a",{id:"MaterialPointGenerator.polygon2particle-Tuple{String, String, String, String, Any}",href:"#MaterialPointGenerator.polygon2particle-Tuple{String, String, String, String, Any}"},[s("span",{class:"jlbinding"},"MaterialPointGenerator.polygon2particle")],-1)),i[10]||(i[10]=e()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[11]||(i[11]=a("",4))])])}const T=l(d,[["render",u]]);export{_ as __pageData,T as default};
