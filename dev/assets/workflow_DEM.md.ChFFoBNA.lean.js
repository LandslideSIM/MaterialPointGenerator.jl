import{_ as r,C as n,c as l,o as d,az as i,j as t,a,G as o}from"./chunks/framework.mzTpsqEJ.js";const p="/MaterialPointGenerator.jl/dev/assets/image4.BEPi5y89.png",w=JSON.parse('{"title":"DEM","description":"","frontmatter":{},"headers":[],"relativePath":"workflow/DEM.md","filePath":"workflow/DEM.md","lastUpdated":null}'),h={name:"workflow/DEM.md"},c={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""};function b(g,e,M,k,E,y){const s=n("Badge");return d(),l("div",null,[e[15]||(e[15]=i("",5)),t("details",c,[t("summary",null,[e[0]||(e[0]=t("a",{id:"MaterialPointGenerator.rasterizeDEM-Union{Tuple{T2}, Tuple{T1}, Tuple{Matrix{T2}, T2}} where {T1, T2}",href:"#MaterialPointGenerator.rasterizeDEM-Union{Tuple{T2}, Tuple{T1}, Tuple{Matrix{T2}, T2}} where {T1, T2}"},[t("span",{class:"jlbinding"},"MaterialPointGenerator.rasterizeDEM")],-1)),e[1]||(e[1]=a()),o(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[2]||(e[2]=i("",4))]),e[16]||(e[16]=t("p",null,[a("Through this function, we can rasterize the input DEM file and specify the spacing between each point (which is the same as the grid size in the MPM simulation). The "),t("code",null,"trimbounds"),a(" parameter is used to define the shape of the DEM file in the x-y plane; it is a two-dimensional array where each row represents a vertex of the shape in the x-y plane. The "),t("code",null,"dembounds"),a(" parameter can be used to specify the range of the DEM in the x-y plane; it is a vector that represents "),t("code",null,"[xmin, xmax, ymin, ymax]"),a(". This can be utilized to process two DEMs of the same area at different times, ensuring they have completely consistent x-y coordinates.")],-1)),e[17]||(e[17]=t("h2",{id:"DEM-with-a-flat-bottom-surface",tabindex:"-1"},[a("DEM with a flat bottom surface "),t("a",{class:"header-anchor",href:"#DEM-with-a-flat-bottom-surface","aria-label":'Permalink to "DEM with a flat bottom surface {#DEM-with-a-flat-bottom-surface}"'},"​")],-1)),e[18]||(e[18]=t("p",null,"Suppose we have a DEM and we want to close it with a base plane, for example, at z=0.",-1)),t("details",u,[t("summary",null,[e[3]||(e[3]=t("a",{id:"MaterialPointGenerator.dem2particle-Union{Tuple{T2}, Tuple{Matrix{T2}, T2, T2}} where T2",href:"#MaterialPointGenerator.dem2particle-Union{Tuple{T2}, Tuple{Matrix{T2}, T2, T2}} where T2"},[t("span",{class:"jlbinding"},"MaterialPointGenerator.dem2particle")],-1)),e[4]||(e[4]=a()),o(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[5]||(e[5]=i("",4))]),e[19]||(e[19]=t("h2",{id:"DEM-with-a-given-bottom-surface",tabindex:"-1"},[a("DEM with a given bottom surface "),t("a",{class:"header-anchor",href:"#DEM-with-a-given-bottom-surface","aria-label":'Permalink to "DEM with a given bottom surface {#DEM-with-a-given-bottom-surface}"'},"​")],-1)),e[20]||(e[20]=t("p",null,"If the base used to close DEM-1 is not a flat surface, we can designate another DEM-2 to serve as the base for closing DEM-1.",-1)),t("details",m,[t("summary",null,[e[6]||(e[6]=t("a",{id:"MaterialPointGenerator.dem2particle-Union{Tuple{T2}, Tuple{Matrix{T2}, T2, Matrix{T2}}} where T2",href:"#MaterialPointGenerator.dem2particle-Union{Tuple{T2}, Tuple{Matrix{T2}, T2, Matrix{T2}}} where T2"},[t("span",{class:"jlbinding"},"MaterialPointGenerator.dem2particle")],-1)),e[7]||(e[7]=a()),o(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[8]||(e[8]=i("",4))]),e[21]||(e[21]=i("",5)),t("details",f,[t("summary",null,[e[9]||(e[9]=t("a",{id:"MaterialPointGenerator.dem2particle-Union{Tuple{T2}, Tuple{Matrix{T2}, T2, T2, Array{Matrix{T2}, 1}}} where T2",href:"#MaterialPointGenerator.dem2particle-Union{Tuple{T2}, Tuple{Matrix{T2}, T2, T2, Array{Matrix{T2}, 1}}} where T2"},[t("span",{class:"jlbinding"},"MaterialPointGenerator.dem2particle")],-1)),e[10]||(e[10]=a()),o(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[11]||(e[11]=i("",4))]),e[22]||(e[22]=t("p",null,"Assuming that we have processed each layered DEM(s), they should be saved in the layer Vector in order from top to bottom along the z-direction as input. Please refer to the usage in the Example section.",-1)),e[23]||(e[23]=t("p",null,"This workflow also supports the case where a bottom DEM is provided:",-1)),t("details",T,[t("summary",null,[e[12]||(e[12]=t("a",{id:"MaterialPointGenerator.dem2particle-Union{Tuple{T2}, Tuple{Matrix{T2}, T2, Matrix{T2}, Array{Matrix{T2}, 1}}} where T2",href:"#MaterialPointGenerator.dem2particle-Union{Tuple{T2}, Tuple{Matrix{T2}, T2, Matrix{T2}, Array{Matrix{T2}, 1}}} where T2"},[t("span",{class:"jlbinding"},"MaterialPointGenerator.dem2particle")],-1)),e[13]||(e[13]=a()),o(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[14]||(e[14]=i("",4))])])}const v=r(h,[["render",b]]);export{w as __pageData,v as default};
